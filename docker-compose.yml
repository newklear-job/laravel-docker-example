version: '3.8'
services:
  back:
    build:
      args:
        user: ${UNAME:-walemy}
        uid: ${UID:-1000}
      context: .
      dockerfile: php.dockerfile
    container_name: orthoshop-back
    restart: unless-stopped
    working_dir: /var/www/orthoshop
    volumes:
      - ./orthoshop:/var/www/orthoshop
    networks:
      - orthoshop

  # node and npm moved to 'back' container
  # front:
  #   image: node:latest
  #   working_dir: /var/www/orthoshop
  #   user: ${UID:-1000}:${GID:-1000}
  #   container_name: orthoshop-front
  #   tty: true
  #   restart: unless-stopped
  #   volumes:
  #     - ./orthoshop:/var/www/orthoshop
  #   networks:
  #     - orthoshop

  db:
    image: mysql:latest
    container_name: orthoshop-db
    restart: unless-stopped
    ports:
      - '3306:3306'
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./docker/mysql/setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - orthoshop-db:/var/lib/mysql
    networks:
      - orthoshop

  nginx:
    image: nginx:alpine
    container_name: orthoshop-nginx
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./orthoshop/:/var/www/orthoshop
      - ./docker/nginx:/etc/nginx/conf.d/
    networks:
      - orthoshop

  redis:
    image: 'redis:latest'
    container_name: orthoshop-redis
    ports:
      - '6379:6379'
    networks:
      - orthoshop

  elasticsearch:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.11.1'
    container_name: orthoshop-elasticsearch
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - orthoshop-es:/usr/share/elasticsearch/data
    networks:
      - orthoshop

networks:
  orthoshop:
    driver: bridge

volumes:
  orthoshop-db:
  orthoshop-es:
